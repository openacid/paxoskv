syntax = "proto3";

package paxoskv;
option go_package = ".;paxoskv";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.equal_all) = true;
option (gogoproto.compare_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;
// option (gogoproto.goproto_stringer_all) = true;
option (gogoproto.goproto_getters_all) = false;

enum Op {
    Noop = 0;
    Prepare = 1;
    Accept = 2;
    Commit = 3;
}

// PaxosKV defines the paxos RPC and KV API.
service PaxosKV {

    // paxos API: used internally
    rpc HandlePaxos (Request) returns (Reply) {}

    // KV API

    rpc Set (Cmd) returns (Cmd) {}
    rpc Get (Cmd) returns (Cmd) {}
}

message Request {
    repeated Op Ops = 1;

    BallotNum Bal = 5;
    int64 Column = 10;
    // from what paxos instance it runs on
    map<int64, Instance> Instances = 20;
}

message Reply {
    BallotNum LastBal = 5;
    // from what paxos instance it runs on
    map<int64, Instance> Instances = 20;

}
// BallotNum is the ballot number in paxos. It consists of a monotonically
// incremental number and a universally unique ProposerId.
message BallotNum {
    int64 N = 1;
    int64 Id = 2;
}

// Cmd is the value in this paxos impl, which is a command to set a key-value
// record.
// In this demo it is just string key and a int64 value.
message Cmd {
    // LSN: log-sequence-number
    // LSN is used to identify a paxos instance.

    // Author and LSN together identifies a Cmd,
    // since the BallotNum of an established leader is globally unique thus it
    // identifies a leader.
    //
    // Different proposers may propose different Cmd for a same log entry.
    // Paxos will finally choose one of them.
    //
    // Two proposers may propose a Cmd with the same Key and Vi64, in which case
    // these two must be distinguishable, otherwise a Write operation may be
    // lost.

    ValueId ValueId = 5;

    string Key = 3;
    int64  Vi64 = 4;
}

message ValueId {
    int64 Column = 1;
    int64 LSN = 5;
    // The ballot.N of the proposer created this Value
    int64 ProposerN = 10;
}

// Instance is the state of an Instance and is the log entry in a multi
// paxos logs
message Instance {
    // the value voted by this Instance
    Cmd Val = 3;

    // at which ballot number the Instance voted it.
    BallotNum VBal = 5;

    repeated int64 Seen = 6;

    bool Committed = 7;
}
